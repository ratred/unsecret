#!/usr/bin/env perl

# ------------------------------------------------------------------------------
# Copyright 2018 https://github.com/ratred
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use strict;
use LWP;
use Data::Dumper;
use Getopt::Long;
use Time::HiRes;

my @ns_headers = (
	'User-Agent' 		=> 'Mozilla/6.0 (IE 11.1; Windows NT 6.3; Trident/7.0; .NET4.0E; .NET4.0C; rv:11.0) like Gecko',
	'Accept' 			=> 'image/gif, image/x-xbitmap, image/jpeg,
        		 			image/pjpeg, image/png, */*',
	'Accept-Charset' 	=> 'iso-8859-1,*,utf-8',
	'Accept-Language' 	=> 'en-US',
);

my $browser = LWP::UserAgent->new;
my $startpage = 1;														  # Страница, с которой начинать скачивание
my $endpage   = 2;														  # Реальный $endpage добудем в бою.
my $cases_url = "http://unsecret.rusarchives.ru/main/filterCases/page";   # URL для скачивания "дел"
my $docs_url  = "http://unsecret.rusarchives.ru/main/filterDocs/page";    # URL для скачивания "документов"
my $logfile   = "getarchlog";                                             # сайт постоянно падает, поэтому надо запоминать, где остановились.                                            # Файл, в котором держим номер скачиваемого документа -  
my $url;
my %filters;


my @csv_struct = qw(dt sbj ae us fnd);
my %cases_filters = (
	           'sbj' => '<b>Заголовок\s+дела<\/b>:([^<]+)<br',
			   'fnd' => '<b>Фонд<\/b>:([^<]+)<br',
	           'dt'  => '<b>Крайние\sдаты\sдела<\/b>:([^<]+)<br',
	           'ae'  => '<b>Крайние\sдаты\sдела<\/b>:[^<]+<br/>\s+([^<]+)<br',
	           'us'	 => '(Рассекречено\sв\s\d+ году)',
	      );

my %docs_filters = (
	           'sbj' => '<b>Заголовок\s+документа<\/b>:([^<]+)<br',
			   'fnd' => '<b>Фонд<\/b>:([^<]+)<br',
	           'dt'  => '<b>Дата\s+документа<\/b>:([^<]+)<br',
	           'ae'  => '<b>Дата\s+документа<\/b>:[^<]+<br/>\s+([^<]+)<br',
	           'us'	 => '(Рассекречено\sв\s\d+ году)',
	      );

my $end_page_filter = 'page/(\d+)">Последняя';

my $dir;
my $verbose;
my $help;
my $localfile;
my $printpage;
my $docs;
my $cases;
my $outfile;
my $debug;

GetOptions ("localfile=s"	=> \$localfile,
			"outfile"		=> \$outfile,
			"printpage"		=> \$printpage,
			"verbose"		=> \$verbose,
			"docs"			=> \$docs,
			"cases"			=> \$cases,
			"debug"			=> \$debug,
            "help"  		=> \$help
            );

if ($help) {help();exit;}

$docs = 1 unless ($docs || $cases);

if ($docs) {
	print "Скачивание документов\n" if ($verbose || $debug);
	$url = $docs_url;
	%filters = %docs_filters;
	$outfile = 'docs.csv' unless ($outfile);
} else {
	print "Скачивание дел\n" if ($verbose || $debug);
	$url = $cases_url;
	%filters = %cases_filters;
	$outfile = 'cases.csv' unless ($outfile);
}
print "Выходой файл: $outfile\n" if ($verbose || $debug);

# Выясняем номер последней страницы
print "Определение номера последней страницы...\n" if ($verbose || $debug);
my $get = getpage($url);
($endpage) = filterpage($end_page_filter, $get);

print "Последняя страница: $endpage\n" if ($verbose || $debug);


# Берём из лога страничку, на которой остановились последний раз
if (-e $logfile) {
	open (LOG, $logfile);
	my @log = <LOG>;
	if ($#log > -1) {
		$startpage = $log[$#log];
		chomp $startpage;
	}
	close LOG;
}

# Цикл по всем страницам
for my $page ($startpage..$endpage) {
	print "Скачивается страница: $page \n" if ($verbose || $debug);
	my $pagestruct;
	my $get = getpage($url . "/$page");

	for my $key (keys %filters) {
		print "Фильтр: $key\n" if ($debug);
		my @filtered = filterpage($filters{$key}, $get);
		for my $strnum (0..$#filtered) {
			$pagestruct -> [$strnum] -> {$key} = $filtered[$strnum];
		}
	}

	savestruct($pagestruct);

	# Запись в лог номера сохранённой страницы
	open (LOG, ">$logfile");
	print LOG $page . "\n";
	close LOG;
	sleep(10);
}

sub savestruct() {
	my $struct = shift;

	open (CSV, ">>$outfile");
	for my $string (@$struct) {
		my @string;
		for my $key (@csv_struct) {
			push(@string, $$string{$key});
		}
		my $string = join("\t", @string);
		print CSV "$string\n";
		print "$string\n" if ($debug);
	}
	close CSV;
}

sub getpage($) {
	# Открыть страничку из файла для отладки
	if ($localfile) {
		open (F, $localfile);
		my $page = join("", <F>);
		close F;
		return $page;
	}

	# Либо скачать реальную страничку
	my $url = shift;

	my $response = $browser->get($url, @ns_headers);
	my $repeat_count;

	# Повторы в случае неудачи
	while (! $response -> is_success) {
		$repeat_count++;
		print $response -> status_line . " repeat $repeat_count   \r" if ($verbose);
		print $response -> status_line . " repeat $repeat_count   \n" if ($debug);
        	$response = $browser->get($url, @ns_headers);
	}
	return $response -> content if ($response -> is_success);
}

sub filterpage($$) {
	my $filter = shift;
	my $page = shift;
	my @results;

	print $page  if ($printpage);
	while ($page =~ /$filter/m) {
		$page = $';
		my $found = $1;

		$found =~ s/\n//g;
		$found =~ s/\s{1,}/ /g;
		$found =~ s/^\s//g;
		$found =~ s/\s+$//g;
		print "Found: $found\n" if ($debug);

		push (@results, $found);
	}
	return @results;
}
	

sub help() {
print <<EOF
	Использование:
		unsecret [option]

	Опции:
		--verbose         - Вывод информации о происходящем на STDIN
		--debug           - Вывод информации о происходящем на STDIN
		--fromfile <file> - Загрузка странички из файла (полезно для отладки регэкспов)
		--cases           - Загружать "дела"
		--docs            - Загружать "документы" (по умолчанию)
		--printpage       - Вывести скачанную страницу целиком
		--outfile <file>  - Название файла, в который выводится csv (по умолчанию - docs.csv и cases.csv)

EOF
}